
RobotProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000933  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  00000d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046b  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  00001e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  78:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initIRSensors>:

#define FLIP_DIRECTION 1


void initIRSensors() {
	DDRD |= (1<<sensor_c);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 68       	ori	r24, 0x80	; 128
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<sensor_l) | (1<<sensor_r);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	89 60       	ori	r24, 0x09	; 9
  8a:	84 b9       	out	0x04, r24	; 4
	
	PORTD &= ~(1<<sensor_c);
  8c:	8b b1       	in	r24, 0x0b	; 11
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(1<<sensor_l) & ~(1<<sensor_r);
  92:	85 b1       	in	r24, 0x05	; 5
  94:	86 7f       	andi	r24, 0xF6	; 246
  96:	85 b9       	out	0x05, r24	; 5
  98:	08 95       	ret

0000009a <getTrackDirection>:
// a positive value when we are on the right side of the track
// the higher the absolute value, the more outward we are
// if -100 is returned, the measurement was weird.

float getTrackDirection() {
	bool left_black   = (PINB == (1<<sensor_l));
  9a:	83 b1       	in	r24, 0x03	; 3
	bool right_black  = (PINB == (1<<sensor_r));
  9c:	23 b1       	in	r18, 0x03	; 3
	bool center_black = (PINB == (1<<sensor_c));
  9e:	93 b1       	in	r25, 0x03	; 3
	
	// Middleish left
	if(!left_black && center_black && right_black ) {
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	21 f0       	breq	.+8      	; 0xac <getTrackDirection+0x12>
  a4:	90 38       	cpi	r25, 0x80	; 128
  a6:	11 f4       	brne	.+4      	; 0xac <getTrackDirection+0x12>
  a8:	28 30       	cpi	r18, 0x08	; 8
  aa:	19 f1       	breq	.+70     	; 0xf2 <getTrackDirection+0x58>
		return -MIDDLEISH * FLIP_DIRECTION;
	} 
	// Middleish right
	else if(!left_black && !center_black && right_black) {
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	21 f0       	breq	.+8      	; 0xb8 <getTrackDirection+0x1e>
  b0:	90 38       	cpi	r25, 0x80	; 128
  b2:	11 f0       	breq	.+4      	; 0xb8 <getTrackDirection+0x1e>
  b4:	28 30       	cpi	r18, 0x08	; 8
  b6:	11 f1       	breq	.+68     	; 0xfc <getTrackDirection+0x62>
		return MIDDLEISH * FLIP_DIRECTION;
	}
	// right
	else if(left_black && center_black && right_black) {
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	21 f4       	brne	.+8      	; 0xc4 <getTrackDirection+0x2a>
  bc:	90 38       	cpi	r25, 0x80	; 128
  be:	11 f4       	brne	.+4      	; 0xc4 <getTrackDirection+0x2a>
  c0:	28 30       	cpi	r18, 0x08	; 8
  c2:	09 f1       	breq	.+66     	; 0x106 <getTrackDirection+0x6c>
		return OUTWARD * FLIP_DIRECTION;
	}
	// left
	else if(!left_black && !center_black && !right_black) {
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	21 f0       	breq	.+8      	; 0xd0 <getTrackDirection+0x36>
  c8:	90 38       	cpi	r25, 0x80	; 128
  ca:	11 f0       	breq	.+4      	; 0xd0 <getTrackDirection+0x36>
  cc:	28 30       	cpi	r18, 0x08	; 8
  ce:	01 f5       	brne	.+64     	; 0x110 <getTrackDirection+0x76>
		return -OUTWARD * FLIP_DIRECTION;
	}
	// right border
	else if(left_black && center_black && !right_black) {
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	21 f4       	brne	.+8      	; 0xdc <getTrackDirection+0x42>
  d4:	90 38       	cpi	r25, 0x80	; 128
  d6:	11 f4       	brne	.+4      	; 0xdc <getTrackDirection+0x42>
  d8:	28 30       	cpi	r18, 0x08	; 8
  da:	f9 f4       	brne	.+62     	; 0x11a <getTrackDirection+0x80>
		return BORDER * FLIP_DIRECTION;
	}
	// left border
	else if(left_black && !center_black && !right_black ) {
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	11 f5       	brne	.+68     	; 0x124 <getTrackDirection+0x8a>
  e0:	90 38       	cpi	r25, 0x80	; 128
  e2:	29 f1       	breq	.+74     	; 0x12e <getTrackDirection+0x94>
  e4:	28 30       	cpi	r18, 0x08	; 8
  e6:	41 f5       	brne	.+80     	; 0x138 <getTrackDirection+0x9e>
		return -BORDER * FLIP_DIRECTION;
	} else {
		return WEIRD_MEASUREMENT;
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	88 ec       	ldi	r24, 0xC8	; 200
  ee:	92 ec       	ldi	r25, 0xC2	; 194
  f0:	08 95       	ret
	bool right_black  = (PINB == (1<<sensor_r));
	bool center_black = (PINB == (1<<sensor_c));
	
	// Middleish left
	if(!left_black && center_black && right_black ) {
		return -MIDDLEISH * FLIP_DIRECTION;
  f2:	6a e9       	ldi	r22, 0x9A	; 154
  f4:	79 e9       	ldi	r23, 0x99	; 153
  f6:	89 e9       	ldi	r24, 0x99	; 153
  f8:	9e eb       	ldi	r25, 0xBE	; 190
  fa:	08 95       	ret
	} 
	// Middleish right
	else if(!left_black && !center_black && right_black) {
		return MIDDLEISH * FLIP_DIRECTION;
  fc:	6a e9       	ldi	r22, 0x9A	; 154
  fe:	79 e9       	ldi	r23, 0x99	; 153
 100:	89 e9       	ldi	r24, 0x99	; 153
 102:	9e e3       	ldi	r25, 0x3E	; 62
 104:	08 95       	ret
	}
	// right
	else if(left_black && center_black && right_black) {
		return OUTWARD * FLIP_DIRECTION;
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	9f e3       	ldi	r25, 0x3F	; 63
 10e:	08 95       	ret
	}
	// left
	else if(!left_black && !center_black && !right_black) {
		return -OUTWARD * FLIP_DIRECTION;
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	9f eb       	ldi	r25, 0xBF	; 191
 118:	08 95       	ret
	}
	// right border
	else if(left_black && center_black && !right_black) {
		return BORDER * FLIP_DIRECTION;
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	9f e3       	ldi	r25, 0x3F	; 63
 122:	08 95       	ret
	}
	// left border
	else if(left_black && !center_black && !right_black ) {
		return -BORDER * FLIP_DIRECTION;
	} else {
		return WEIRD_MEASUREMENT;
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	88 ec       	ldi	r24, 0xC8	; 200
 12a:	92 ec       	ldi	r25, 0xC2	; 194
 12c:	08 95       	ret
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	88 ec       	ldi	r24, 0xC8	; 200
 134:	92 ec       	ldi	r25, 0xC2	; 194
 136:	08 95       	ret
	else if(left_black && center_black && !right_black) {
		return BORDER * FLIP_DIRECTION;
	}
	// left border
	else if(left_black && !center_black && !right_black ) {
		return -BORDER * FLIP_DIRECTION;
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	9f eb       	ldi	r25, 0xBF	; 191
	} else {
		return WEIRD_MEASUREMENT;
	}
 140:	08 95       	ret

00000142 <set_speed>:
#ifdef RIGHT_MOTOR_PIN
#define RIGHT_MOTOR_OCnx OCR0A
#endif


void set_speed(int left_motor_speed, int right_motor_speed){			
 142:	9b 01       	movw	r18, r22
	if (left_motor_speed >= MOTOR_MINIMUM_SPEED && left_motor_speed <= MOTOR_MAXIMUM_SPEED && 
 144:	85 36       	cpi	r24, 0x65	; 101
 146:	91 05       	cpc	r25, r1
 148:	f0 f4       	brcc	.+60     	; 0x186 <set_speed+0x44>
 14a:	77 23       	and	r23, r23
 14c:	e4 f0       	brlt	.+56     	; 0x186 <set_speed+0x44>
		right_motor_speed >= MOTOR_MINIMUM_SPEED && right_motor_speed <= MOTOR_MAXIMUM_SPEED){
 14e:	65 36       	cpi	r22, 0x65	; 101
 150:	71 05       	cpc	r23, r1
 152:	cc f4       	brge	.+50     	; 0x186 <set_speed+0x44>
		
		//Set OCnx values
		LEFT_MOTOR_OCnx = (left_motor_speed * MOTOR_PWM_TIMER_TOP) / 100;
 154:	4f ef       	ldi	r20, 0xFF	; 255
 156:	48 9f       	mul	r20, r24
 158:	b0 01       	movw	r22, r0
 15a:	49 9f       	mul	r20, r25
 15c:	70 0d       	add	r23, r0
 15e:	11 24       	eor	r1, r1
 160:	e4 e6       	ldi	r30, 0x64	; 100
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	cb 01       	movw	r24, r22
 166:	bf 01       	movw	r22, r30
 168:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodhi4>
 16c:	68 bd       	out	0x28, r22	; 40
		RIGHT_MOTOR_OCnx = (right_motor_speed * MOTOR_PWM_TIMER_TOP) / 100;
 16e:	42 9f       	mul	r20, r18
 170:	c0 01       	movw	r24, r0
 172:	43 9f       	mul	r20, r19
 174:	90 0d       	add	r25, r0
 176:	11 24       	eor	r1, r1
 178:	bf 01       	movw	r22, r30
 17a:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodhi4>
 17e:	67 bd       	out	0x27, r22	; 39
	
		//Start Timer by setting no Prescaler.
		TCCR0B |= (1<<CS00) | (1<<CS02);		
 180:	85 b5       	in	r24, 0x25	; 37
 182:	85 60       	ori	r24, 0x05	; 5
 184:	85 bd       	out	0x25, r24	; 37
 186:	08 95       	ret

00000188 <pwm_timer_init>:



void pwm_timer_init(void){
	//Just to make sure the pins are set as OUTPUT.
	MOTORS_DDR |= (1<<LEFT_MOTOR_PIN) | (1<<RIGHT_MOTOR_PIN);
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	80 66       	ori	r24, 0x60	; 96
 18c:	8a b9       	out	0x0a, r24	; 10
	
	//Enable global interrupts
	sei();
 18e:	78 94       	sei
	
	//Enable PWM for PIND5 and PIND6. Set timer to FAST PWM mode.
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM00) | (1<<WGM01);
 190:	84 b5       	in	r24, 0x24	; 36
 192:	83 6a       	ori	r24, 0xA3	; 163
 194:	84 bd       	out	0x24, r24	; 36
	
	//Enable Overflow interrupt.
	TIMSK0 = (1<<TOIE0);	
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 19c:	08 95       	ret

0000019e <__vector_16>:
}


ISR(TIMER0_OVF_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
	//DO NOTHING
	
	
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:
#include <util/delay.h>

int main(void)
{
	
	initIRSensors();
 1b2:	0e 94 40 00 	call	0x80	; 0x80 <initIRSensors>
	pwm_timer_init();	
 1b6:	0e 94 c4 00 	call	0x188	; 0x188 <pwm_timer_init>
	set_speed(30, 30);
 1ba:	6e e1       	ldi	r22, 0x1E	; 30
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	8e e1       	ldi	r24, 0x1E	; 30
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
	*/
    /* Replace with your application code */
    while (1) 
    {
		
		float track_dir = getTrackDirection();
 1c6:	0e 94 4d 00 	call	0x9a	; 0x9a <getTrackDirection>
 1ca:	6b 01       	movw	r12, r22
 1cc:	7c 01       	movw	r14, r24
		
		
		if(track_dir == MIDDLEISH){
 1ce:	2a e9       	ldi	r18, 0x9A	; 154
 1d0:	39 e9       	ldi	r19, 0x99	; 153
 1d2:	49 e9       	ldi	r20, 0x99	; 153
 1d4:	5e e3       	ldi	r21, 0x3E	; 62
 1d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__cmpsf2>
 1da:	81 11       	cpse	r24, r1
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <main+0x38>
			set_speed(30,35);
 1de:	63 e2       	ldi	r22, 0x23	; 35
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8e e1       	ldi	r24, 0x1E	; 30
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
		}
		
		
		if(track_dir == -MIDDLEISH){
 1ea:	2a e9       	ldi	r18, 0x9A	; 154
 1ec:	39 e9       	ldi	r19, 0x99	; 153
 1ee:	49 e9       	ldi	r20, 0x99	; 153
 1f0:	5e eb       	ldi	r21, 0xBE	; 190
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__cmpsf2>
 1fa:	81 11       	cpse	r24, r1
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <main+0x58>
			set_speed(35, 30);
 1fe:	6e e1       	ldi	r22, 0x1E	; 30
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	83 e2       	ldi	r24, 0x23	; 35
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
			
		}
		
		
		if(track_dir == OUTWARD){
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e4       	ldi	r20, 0x40	; 64
 210:	5f e3       	ldi	r21, 0x3F	; 63
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__cmpsf2>
 21a:	81 11       	cpse	r24, r1
 21c:	06 c0       	rjmp	.+12     	; 0x22a <main+0x78>
			set_speed(18,35);
 21e:	63 e2       	ldi	r22, 0x23	; 35
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	82 e1       	ldi	r24, 0x12	; 18
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
			
			
		}
		
		
		if(track_dir == -OUTWARD){
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e4       	ldi	r20, 0x40	; 64
 230:	5f eb       	ldi	r21, 0xBF	; 191
 232:	c7 01       	movw	r24, r14
 234:	b6 01       	movw	r22, r12
 236:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__cmpsf2>
 23a:	81 11       	cpse	r24, r1
 23c:	06 c0       	rjmp	.+12     	; 0x24a <main+0x98>
			set_speed(35,18);
 23e:	62 e1       	ldi	r22, 0x12	; 18
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	83 e2       	ldi	r24, 0x23	; 35
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
			
		}
		
		
		
		if(track_dir == BORDER){
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__cmpsf2>
 25a:	81 11       	cpse	r24, r1
 25c:	06 c0       	rjmp	.+12     	; 0x26a <main+0xb8>
			set_speed(0, 100);
 25e:	64 e6       	ldi	r22, 0x64	; 100
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
			
			
		}
		
		
		if(track_dir == -BORDER){
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e8       	ldi	r20, 0x80	; 128
 270:	5f eb       	ldi	r21, 0xBF	; 191
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__cmpsf2>
 27a:	81 11       	cpse	r24, r1
 27c:	06 c0       	rjmp	.+12     	; 0x28a <main+0xd8>
			set_speed(100, 0);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	84 e6       	ldi	r24, 0x64	; 100
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
			
		}
		
		if(track_dir == WEIRD_MEASUREMENT){
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	48 ec       	ldi	r20, 0xC8	; 200
 290:	52 ec       	ldi	r21, 0xC2	; 194
 292:	c7 01       	movw	r24, r14
 294:	b6 01       	movw	r22, r12
 296:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__cmpsf2>
 29a:	81 11       	cpse	r24, r1
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <main+0xf8>
			set_speed(0, 0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 a1 00 	call	0x142	; 0x142 <set_speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	8f ed       	ldi	r24, 0xDF	; 223
 2ac:	9e e2       	ldi	r25, 0x2E	; 46
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0xfc>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x102>
 2b4:	00 00       	nop
 2b6:	87 cf       	rjmp	.-242    	; 0x1c6 <main+0x14>

000002b8 <__cmpsf2>:
 2b8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__fp_cmp>
 2bc:	08 f4       	brcc	.+2      	; 0x2c0 <__cmpsf2+0x8>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	08 95       	ret

000002c2 <__fp_cmp>:
 2c2:	99 0f       	add	r25, r25
 2c4:	00 08       	sbc	r0, r0
 2c6:	55 0f       	add	r21, r21
 2c8:	aa 0b       	sbc	r26, r26
 2ca:	e0 e8       	ldi	r30, 0x80	; 128
 2cc:	fe ef       	ldi	r31, 0xFE	; 254
 2ce:	16 16       	cp	r1, r22
 2d0:	17 06       	cpc	r1, r23
 2d2:	e8 07       	cpc	r30, r24
 2d4:	f9 07       	cpc	r31, r25
 2d6:	c0 f0       	brcs	.+48     	; 0x308 <__fp_cmp+0x46>
 2d8:	12 16       	cp	r1, r18
 2da:	13 06       	cpc	r1, r19
 2dc:	e4 07       	cpc	r30, r20
 2de:	f5 07       	cpc	r31, r21
 2e0:	98 f0       	brcs	.+38     	; 0x308 <__fp_cmp+0x46>
 2e2:	62 1b       	sub	r22, r18
 2e4:	73 0b       	sbc	r23, r19
 2e6:	84 0b       	sbc	r24, r20
 2e8:	95 0b       	sbc	r25, r21
 2ea:	39 f4       	brne	.+14     	; 0x2fa <__fp_cmp+0x38>
 2ec:	0a 26       	eor	r0, r26
 2ee:	61 f0       	breq	.+24     	; 0x308 <__fp_cmp+0x46>
 2f0:	23 2b       	or	r18, r19
 2f2:	24 2b       	or	r18, r20
 2f4:	25 2b       	or	r18, r21
 2f6:	21 f4       	brne	.+8      	; 0x300 <__fp_cmp+0x3e>
 2f8:	08 95       	ret
 2fa:	0a 26       	eor	r0, r26
 2fc:	09 f4       	brne	.+2      	; 0x300 <__fp_cmp+0x3e>
 2fe:	a1 40       	sbci	r26, 0x01	; 1
 300:	a6 95       	lsr	r26
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	81 1d       	adc	r24, r1
 306:	81 1d       	adc	r24, r1
 308:	08 95       	ret

0000030a <__divmodhi4>:
 30a:	97 fb       	bst	r25, 7
 30c:	07 2e       	mov	r0, r23
 30e:	16 f4       	brtc	.+4      	; 0x314 <__divmodhi4+0xa>
 310:	00 94       	com	r0
 312:	07 d0       	rcall	.+14     	; 0x322 <__divmodhi4_neg1>
 314:	77 fd       	sbrc	r23, 7
 316:	09 d0       	rcall	.+18     	; 0x32a <__divmodhi4_neg2>
 318:	0e 94 99 01 	call	0x332	; 0x332 <__udivmodhi4>
 31c:	07 fc       	sbrc	r0, 7
 31e:	05 d0       	rcall	.+10     	; 0x32a <__divmodhi4_neg2>
 320:	3e f4       	brtc	.+14     	; 0x330 <__divmodhi4_exit>

00000322 <__divmodhi4_neg1>:
 322:	90 95       	com	r25
 324:	81 95       	neg	r24
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	08 95       	ret

0000032a <__divmodhi4_neg2>:
 32a:	70 95       	com	r23
 32c:	61 95       	neg	r22
 32e:	7f 4f       	sbci	r23, 0xFF	; 255

00000330 <__divmodhi4_exit>:
 330:	08 95       	ret

00000332 <__udivmodhi4>:
 332:	aa 1b       	sub	r26, r26
 334:	bb 1b       	sub	r27, r27
 336:	51 e1       	ldi	r21, 0x11	; 17
 338:	07 c0       	rjmp	.+14     	; 0x348 <__udivmodhi4_ep>

0000033a <__udivmodhi4_loop>:
 33a:	aa 1f       	adc	r26, r26
 33c:	bb 1f       	adc	r27, r27
 33e:	a6 17       	cp	r26, r22
 340:	b7 07       	cpc	r27, r23
 342:	10 f0       	brcs	.+4      	; 0x348 <__udivmodhi4_ep>
 344:	a6 1b       	sub	r26, r22
 346:	b7 0b       	sbc	r27, r23

00000348 <__udivmodhi4_ep>:
 348:	88 1f       	adc	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	5a 95       	dec	r21
 34e:	a9 f7       	brne	.-22     	; 0x33a <__udivmodhi4_loop>
 350:	80 95       	com	r24
 352:	90 95       	com	r25
 354:	bc 01       	movw	r22, r24
 356:	cd 01       	movw	r24, r26
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
