
RobotProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000709  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000965  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <set_speed>:
#ifdef RIGHT_MOTOR_PIN
#define RIGHT_MOTOR_OCnx OCR0A
#endif


void set_speed(int left_motor_speed, int right_motor_speed){	
  80:	9b 01       	movw	r18, r22
	
	if (left_motor_speed >= MOTOR_MINIMUM_SPEED && left_motor_speed <= MOTOR_MAXIMUM_SPEED && 
  82:	ac 01       	movw	r20, r24
  84:	4e 51       	subi	r20, 0x1E	; 30
  86:	51 09       	sbc	r21, r1
  88:	47 34       	cpi	r20, 0x47	; 71
  8a:	51 05       	cpc	r21, r1
  8c:	f8 f4       	brcc	.+62     	; 0xcc <set_speed+0x4c>
  8e:	6e 31       	cpi	r22, 0x1E	; 30
  90:	71 05       	cpc	r23, r1
  92:	e4 f0       	brlt	.+56     	; 0xcc <set_speed+0x4c>
		right_motor_speed >= MOTOR_MINIMUM_SPEED && right_motor_speed <= MOTOR_MAXIMUM_SPEED){
  94:	65 36       	cpi	r22, 0x65	; 101
  96:	71 05       	cpc	r23, r1
  98:	cc f4       	brge	.+50     	; 0xcc <set_speed+0x4c>
		
		//Set OCnx values
		LEFT_MOTOR_OCnx = (left_motor_speed * MOTOR_PWM_TIMER_TOP) / 100;
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	48 9f       	mul	r20, r24
  9e:	b0 01       	movw	r22, r0
  a0:	49 9f       	mul	r20, r25
  a2:	70 0d       	add	r23, r0
  a4:	11 24       	eor	r1, r1
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	cb 01       	movw	r24, r22
  ac:	bf 01       	movw	r22, r30
  ae:	0e 94 85 00 	call	0x10a	; 0x10a <__divmodhi4>
  b2:	68 bd       	out	0x28, r22	; 40
		RIGHT_MOTOR_OCnx = (right_motor_speed * MOTOR_PWM_TIMER_TOP) / 100;
  b4:	42 9f       	mul	r20, r18
  b6:	c0 01       	movw	r24, r0
  b8:	43 9f       	mul	r20, r19
  ba:	90 0d       	add	r25, r0
  bc:	11 24       	eor	r1, r1
  be:	bf 01       	movw	r22, r30
  c0:	0e 94 85 00 	call	0x10a	; 0x10a <__divmodhi4>
  c4:	67 bd       	out	0x27, r22	; 39
	
		//Start Timer by setting no Prescaler.
		TCCR0B |= (1<<CS00) | (1<<CS02);		
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	85 60       	ori	r24, 0x05	; 5
  ca:	85 bd       	out	0x25, r24	; 37
  cc:	08 95       	ret

000000ce <pwm_timer_init>:



void pwm_timer_init(){
	//Just to make sure the pins are set as OUTPUT.
	MOTORS_DDR |= (1<<LEFT_MOTOR_PIN) | (1<<RIGHT_MOTOR_PIN);
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	80 66       	ori	r24, 0x60	; 96
  d2:	8a b9       	out	0x0a, r24	; 10
	
	//Enable global interrupts
	sei();
  d4:	78 94       	sei
	
	//Enable PWM for PIND5 and PIND6. Set timer to FAST PWM mode.
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM00) | (1<<WGM01);
  d6:	84 b5       	in	r24, 0x24	; 36
  d8:	83 6a       	ori	r24, 0xA3	; 163
  da:	84 bd       	out	0x24, r24	; 36
	
	//Enable Overflow interrupt.
	TIMSK0 = (1<<TOIE0);	
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  e2:	08 95       	ret

000000e4 <__vector_16>:
}


ISR(TIMER0_OVF_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
	//DO NOTHING
	
	
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:
#include "motor_control.h"

int main(void)
{
	
	pwm_timer_init();
  f8:	0e 94 67 00 	call	0xce	; 0xce <pwm_timer_init>
	
    /* Replace with your application code */
    while (1) 
    {
		set_speed(30, 40);
  fc:	68 e2       	ldi	r22, 0x28	; 40
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	8e e1       	ldi	r24, 0x1E	; 30
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 40 00 	call	0x80	; 0x80 <set_speed>
 108:	f9 cf       	rjmp	.-14     	; 0xfc <main+0x4>

0000010a <__divmodhi4>:
 10a:	97 fb       	bst	r25, 7
 10c:	07 2e       	mov	r0, r23
 10e:	16 f4       	brtc	.+4      	; 0x114 <__divmodhi4+0xa>
 110:	00 94       	com	r0
 112:	07 d0       	rcall	.+14     	; 0x122 <__divmodhi4_neg1>
 114:	77 fd       	sbrc	r23, 7
 116:	09 d0       	rcall	.+18     	; 0x12a <__divmodhi4_neg2>
 118:	0e 94 99 00 	call	0x132	; 0x132 <__udivmodhi4>
 11c:	07 fc       	sbrc	r0, 7
 11e:	05 d0       	rcall	.+10     	; 0x12a <__divmodhi4_neg2>
 120:	3e f4       	brtc	.+14     	; 0x130 <__divmodhi4_exit>

00000122 <__divmodhi4_neg1>:
 122:	90 95       	com	r25
 124:	81 95       	neg	r24
 126:	9f 4f       	sbci	r25, 0xFF	; 255
 128:	08 95       	ret

0000012a <__divmodhi4_neg2>:
 12a:	70 95       	com	r23
 12c:	61 95       	neg	r22
 12e:	7f 4f       	sbci	r23, 0xFF	; 255

00000130 <__divmodhi4_exit>:
 130:	08 95       	ret

00000132 <__udivmodhi4>:
 132:	aa 1b       	sub	r26, r26
 134:	bb 1b       	sub	r27, r27
 136:	51 e1       	ldi	r21, 0x11	; 17
 138:	07 c0       	rjmp	.+14     	; 0x148 <__udivmodhi4_ep>

0000013a <__udivmodhi4_loop>:
 13a:	aa 1f       	adc	r26, r26
 13c:	bb 1f       	adc	r27, r27
 13e:	a6 17       	cp	r26, r22
 140:	b7 07       	cpc	r27, r23
 142:	10 f0       	brcs	.+4      	; 0x148 <__udivmodhi4_ep>
 144:	a6 1b       	sub	r26, r22
 146:	b7 0b       	sbc	r27, r23

00000148 <__udivmodhi4_ep>:
 148:	88 1f       	adc	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	5a 95       	dec	r21
 14e:	a9 f7       	brne	.-22     	; 0x13a <__udivmodhi4_loop>
 150:	80 95       	com	r24
 152:	90 95       	com	r25
 154:	bc 01       	movw	r22, r24
 156:	cd 01       	movw	r24, r26
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
